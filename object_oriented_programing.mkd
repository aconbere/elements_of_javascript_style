# Object Oriented JavaScript #

For this section we're assuming that the reader is already familiar with Object
Oriented programming.

## Objects in Javascript ##

Almost certainly you're already familiar with objects in JavaScript even if
you're not aware of it. In JavaScript, Hashes and Objects are the same thing.
And they are everywhere!

    var h = {"x": 10,
             "y": 20
            };

    h["x"]
    => 10

    h.x
    => 10

> This is the "object literal" syntax, it provides a simple and clean syntax
> for making objects.

Similarly

    var o = new Object();
    o.x = 10;
    o.y = 20;

    o.x
    => 10

    o["x"]
    => 10

The goal of this document to talk about how we can use these objects to our
advantage.

## Building Your Own Objects ##

Although Javascript is distinctly Object Oriented, you'll notices that it has
no notion of a class. Rather it has only Objects, and Constructor Functions.
People coming from a background in other object oriented languages might find
this confusing, and should be warned that many of your intuitions about the way
these constructs behave might be wrong.

And while JavaScript lacks any formal support for Inheritence, Encapsulation,
or Polymorphism, you'll find that even without that, the tools provided can be
used in a rich variety of ways to provide many of the features of traditional
object oriented languages.

### Constructor Functions ###

New types of objects are defined using Constructor functions.

    var Speaker = function() {};

A Constructor Function is in all respects the same as any other function, it
differs only in how it is called.

    var s = new Speaker();

The use of the new keyword in this case has a variety of effects on the
behavior of the function. First, it creates an invisible object called 'this',
and Second it creates an implict return value of "this". "this", becomes our
brand new object.

Since the Constructor has access to this, from the start, you can manipulate
the returned object by manipulating this.

    var Microphone = function() {
      this.volume = 10;
    }

    var m = new Microphone();
    m.volume
    => 10

We can also manipulate "this", by operating on the Constructors prototype
object. The prototype object provides a starting point for "this", and is
simply an ordinary object, attached to the "prototype" field of a Constructor
Function.

    var Amp = function(maxVolume) {
      this.maxVolume = maxVolume || 10;
      this.volume = 0;
    }

    Amp.prototype.setVolume(volume) {
      this.volume = Math.min(this.maxVolume, volume);
    };

    var a1 = Amp();
    a.setVolume(11);
    a.volume
    => 10

    var a2 = Amp(11);
    a.setVolume(11);
    a.volume
    => 11

### Inheritence ###
