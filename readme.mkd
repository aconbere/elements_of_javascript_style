I start with the assertion that there is a great language inside of JavaScript. But that many people struggle to find their way to it. The most common resources for learning were written in the dark ages of the web, and advocate a style and structure that is non-condusive to quality readable code.

The goal is to fill a gap in the JavaScript community, to codify common styles, to point out common anti-patterns to those learning the language for the first time, and to solidify a set of common styles for those who have been at this for a while longer.

#Indentation#

Always use two or four spaces, never both, no tabs

    var x = function(el) {
      alert(el);
    };

#WhiteSpace#

Avoid extraneous whitespace

    spam(ham[1], {eggs: 2})

For clarity use one space before and after operators.

    10 * (2.0 / 5.0)

#Braces#

The starting brace begins inline with the block definition. The closing brace
ends on its own line at the bottom of the block, in the same column as the
begining of the block definition.

    var f = function() {
      var g = function() {
        if (true) {
          return "g";
        }
      };
    };

In the case of if / else blocks. The else belongs inline with the closing
brace. Previous rules hold.

    if (true) {
      return "apple";
    } else {
      return "orange";
    }

#Naming#

Variables and methods should be __camelCase__.

Classes should be __CamelCased__ but capatalized in front.

Constants should be __ALL_CAPS__.

    MY_CONSTANT = 10;

    var myVariable = 12;

    var MyClass = function() {
      this.myMember = 13;
    }

    MyClass.prototype.myMethod = function() { alert(this.myMemeber) };

#Functions#

Functions should be declared as variables, and whenever possible, defined on multiple lines.

    var myFunc = function() {
      return "apple"
    };

For one liners, and inline functions, an extra space after the starting brace,
and before the ending brace improves readability.

    var myFunc = function() { return "apple" };

Avoid declaring functions inside object literals.

    var myObj = {property: 1};
    myObj.prop = function() {
      return this.property;
    };

##Optional Arguments##

To define an optional argument use the "||" operator.

    var myFunc = function(x) {
      x = x || "default";
    };

#Things to avoid#

## Trailing Commas ##

Never use a trailing comma (not universally supported).

    ["apple",
     "orange",
     "pineapple"]

    {x: 10,
     y: 10
    }

## Keywords as hash keys ##

When in doubt put the key in strings.

    {"event": 20,
     "function": 30,
     "if": 40
    }

## Monkey Patching ##

Don't modify global objects in ways they weren't intended.

    Object.prototype.type = "apple";

Developers depend on being able to make good assumptions about the behavior of their tools. When changes are made that subtly change the behavior of code they're using  it makes it very hard to write correct programs.

