# Elements of JavaScript Style #

We start with the assertion that there is a great language inside of JavaScript. But that many people struggle to find their way to it. The most common resources for learning were written in the dark ages of the web, and advocate a style and structure that is non-conducive to quality readable code.

The goal is to fill a gap in the JavaScript community, to codify common styles, to point out common anti-patterns to those learning the language for the first time, and to solidify a set of common styles for those who have been at this for a while longer.

> I know that some of this advice flies in the face of some libraries, and some people's personal style opinions. It's worth noting that I'm not suggesting that everyone in the world should agree with this, or even follow this advice. But that when suggesting a set of styles for someone learning JavaScript, these would be a great set of suggestions. Please keep that target audience in mind.

## Scopes and Name Spaces ##

Work to stay out of the global scope as much as possible. The default scope for variables and functions in JavaScript is global. This can make life difficult.  Some strategies to avoid issues are:

Make sure all variables that are scoped to a particular block, and declared with the var keyword.

    function() {
      var x = 10;
    };

> Variables declared without var, are always injected into the global name space.

This even goes for for loops.

    var j = 0;
    for(var i = 0; i < 10; i++) {
      j = j + i;
    }

When writing your applications make use of objects to store your classes and functions.

    var MyApp = {};
    MyApp.Mapp = function() {};
  
    var x = new MyApp.Map();

> This prevents accidental name collisions with other libraries. If you want the
> Map object, consider that it's a common name for an object. By attaching the
> Map object to a less generic object like MyApp, you greatly reduce the chance
> of accidental collision.

Instead of making a bunch of extra variables in a name space, you can contain them within an anonymous function.

    var x = function() {
      var y = 10;
      var z = 20;
      return {"x": 0,
              "y": y,
              "z": z };
    }();

## Indentation ##

Always use two or four spaces, never both, no tabs

    var x = function(el) {
      return el;
    };

## WhiteSpace ##

Avoid extraneous whitespace

    spam(ham[1], {eggs: 2})

For clarity use one space before and after operators.

    10 * (2.0 / 5.0)

## Braces ##

The starting brace begins inline with the block definition. The closing brace
ends on its own line at the bottom of the block, in the same column as the
begining of the block definition.

    var f = function() {
      var g = function() {
        if (true) {
          return "g";
        }
      };
    };

In the case of if / else blocks. The else belongs inline with the closing
brace. Previous rules hold.

    if (true) {
      return "apple";
    } else {
      return "orange";
    }

## Naming ##

Variables and methods should be __camelCase__.

Classes should be __CamelCased__ but capitalized in front.

Constants should be __ALL_CAPS__.

    MY_CONSTANT = 10;

    var myVariable = 12;

    var MyClass = function() {
      this.myMember = 13;
    }

    MyClass.prototype.myMethod = function() { alert(this.myMember) };

## Functions ##

Functions should be declared as variables, and whenever possible, defined on multiple lines.

    var myFunc = function() {
      return "apple"
    };

> This presents a single syntax for function declaration. It mirrors the
> anonymous syntax used with passing functions to callbacks, and the
> method of defining functions on classes or objects.

For one liners, and inline functions, an extra space after the starting brace,
and before the ending brace improves readability.

    var myFunc = function() { return "apple" };

Avoid declaring functions inside object literals.

    var myObj = {property: 1};
    myObj.prop = function() {
      return this.property;
    };

> Function declaration inside objects isn't strictly bad, but it's worth
> observing that it can quickly become crowded with braces, and in most
> cases it can be more clearly accomplished by attaching the functions
> to the object directly.

### Optional Arguments ###

To define an optional argument use the "||" operator.

    var myFunc = function(x) {
      x = x || "default";
    };

## Hashes ##

Use strings as hash keys.

    {"event": 20,
     "function": 30,
     "if": 40
    }

> In some implementations, keywords are invalid hash keys. Wrap them in quotes
> to prevent issues.

## Things To Avoid ##

### Trailing Commas ###

Never use a trailing comma (not universally supported).

    ["apple",
     "orange",
     "pineapple"]

    {x: 10,
     y: 10
    }

### Monkey Patching ###

Don't modify global objects in ways they weren't intended.

    Object.prototype.type = "apple";

> Developers depend on being able to make good assumptions about the behavior of their tools. When changes are made that subtly change the behavior of code they're using  it makes it very hard to write correct programs.

